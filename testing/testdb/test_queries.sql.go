// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: test_queries.sql

package testdb

import (
	"context"
)

const cleanAfterTest = `-- name: CleanAfterTest :exec
TRUNCATE
    taskcar.task,
    taskcar.completed_task,
    taskcar.failed_task,
    taskcar.task_backoff
    CASCADE
`

func (q *Queries) CleanAfterTest(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanAfterTest)
	return err
}

const currentTasks = `-- name: CurrentTasks :one
SELECT
    (SELECT count(*) FROM taskcar.task) as task_count,
    (SELECT count(*) FROM taskcar.completed_task) as completed_task_count,
    (SELECT count(*) FROM taskcar.failed_task) as failed_task_count,
    (SELECT count(*) FROM taskcar.task_backedoff) as backoffed_task_count
`

type CurrentTasksRow struct {
	TaskCount          int64
	CompletedTaskCount int64
	FailedTaskCount    int64
	BackoffedTaskCount int64
}

func (q *Queries) CurrentTasks(ctx context.Context) (CurrentTasksRow, error) {
	row := q.db.QueryRow(ctx, currentTasks)
	var i CurrentTasksRow
	err := row.Scan(
		&i.TaskCount,
		&i.CompletedTaskCount,
		&i.FailedTaskCount,
		&i.BackoffedTaskCount,
	)
	return i, err
}

const getCompletedTask = `-- name: GetCompletedTask :one
SELECT
    task_id, created_at, queue, task_created_at, in_data, out_data, log, attempts, node_id
FROM taskcar.completed_task
WHERE
    task_id = $1
`

func (q *Queries) GetCompletedTask(ctx context.Context, taskID int64) (TaskcarCompletedTask, error) {
	row := q.db.QueryRow(ctx, getCompletedTask, taskID)
	var i TaskcarCompletedTask
	err := row.Scan(
		&i.TaskID,
		&i.CreatedAt,
		&i.Queue,
		&i.TaskCreatedAt,
		&i.InData,
		&i.OutData,
		&i.Log,
		&i.Attempts,
		&i.NodeID,
	)
	return i, err
}
